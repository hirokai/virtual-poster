// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// Direction is the 'direction' enum type from schema 'public'.
type Direction uint16

const (
	// DirectionLeft is the 'left' Direction.
	DirectionLeft = Direction(1)

	// DirectionUp is the 'up' Direction.
	DirectionUp = Direction(2)

	// DirectionDown is the 'down' Direction.
	DirectionDown = Direction(3)

	// DirectionRight is the 'right' Direction.
	DirectionRight = Direction(4)

	// DirectionNone is the 'none' Direction.
	DirectionNone = Direction(5)
)

// String returns the string value of the Direction.
func (d Direction) String() string {
	var enumVal string

	switch d {
	case DirectionLeft:
		enumVal = "left"

	case DirectionUp:
		enumVal = "up"

	case DirectionDown:
		enumVal = "down"

	case DirectionRight:
		enumVal = "right"

	case DirectionNone:
		enumVal = "none"
	}

	return enumVal
}

// MarshalText marshals Direction into text.
func (d Direction) MarshalText() ([]byte, error) {
	return []byte(d.String()), nil
}

// UnmarshalText unmarshals Direction from text.
func (d *Direction) UnmarshalText(text []byte) error {
	switch string(text) {
	case "left":
		*d = DirectionLeft

	case "up":
		*d = DirectionUp

	case "down":
		*d = DirectionDown

	case "right":
		*d = DirectionRight

	case "none":
		*d = DirectionNone

	default:
		return errors.New("invalid Direction")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Direction.
func (d Direction) Value() (driver.Value, error) {
	return d.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Direction.
func (d *Direction) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Direction")
	}

	return d.UnmarshalText(buf)
}
