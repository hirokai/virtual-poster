openapi: 3.0.0
info:
  title: virtual-poster
  version: "1.0"
  contact:
    name: Hiroyuki Kai
    email: fullerenec84@gmail.com
  description: Virtual poster API
  license:
    name: GPL or virtual-poster license
servers:
  - url: "http://localhost:3000/api"
paths:
  "/maps/{roomId}/people":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        description: Room ID
        required: true
    get:
      summary: Get a list of people
      tags:
        - people
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PersonInMap"
      operationId: get-maps-roomId-people
      parameters:
        - schema:
            type: boolean
          in: query
          name: email
          description: Return email address of each user. Only valid for app admin and room owner.
        - schema:
            type: boolean
          in: query
          name: groups
          description: Return user groups in the room. Only valid for app admin and room owner. Note that this group is different from chat groups
      description: Get all people in the room. Only returns who entered the room already.
  "/people/{userId}":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: ""
    get:
      summary: Get information on a user
      tags:
        - people
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonWithEmail"
            application/xml:
              schema:
                type: object
                properties: {}
      operationId: get-people-userId
      description: Get a person
      security:
        - debugAs: []
        - debugToken: []
      parameters:
        - schema:
            type: boolean
          in: query
          name: email
    patch:
      summary: Information on a user
      operationId: put-people-userId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                  modified:
                    type: object
                    properties:
                      keys:
                        type: array
                        items:
                          type: string
                      update:
                        type: object
                        required:
                          - id
                          - last_updated
                        properties:
                          id:
                            type: string
                          last_updated:
                            type: number
                          name:
                            type: string
                          email:
                            type: string
                    required:
                      - keys
                      - update
                required:
                  - ok
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
                  minLength: 1
                avatar:
                  type: string
      tags:
        - people
      security:
        - debugAs: []
        - debugToken: []
      description: "Update person info  "
    delete:
      summary: ""
      operationId: delete-people-userId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      description: Delete the user account
      tags:
        - people
  /people:
    get:
      summary: List all users
      tags:
        - people
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PersonWithEmail"
      operationId: get-people
      parameters:
        - schema:
            type: boolean
          in: query
          name: email
          description: Include email
          allowEmptyValue: true
        - $ref: "#/components/parameters/debug_token"
        - $ref: "#/components/parameters/debug_as"
      description: List all users who are visible to the user
    post:
      summary: Create a new user
      operationId: post-people
      responses:
        "200":
          description: OK
      parameters:
        - $ref: "#/components/parameters/debug_token"
        - $ref: "#/components/parameters/debug_as"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
                  minLength: 1
                avatar:
                  type: string
                rooms:
                  type: array
                  items:
                    $ref: "#/components/schemas/RoomId"
                on_conflict:
                  type: string
                  enum:
                    - append
                    - reject
                    - replace
              required:
                - email
                - name
        description: ""
      description: Add new person
      tags:
        - people
      security:
        - debugAs: []
        - debugToken: []
  "/people_multi/{userIds}":
    get:
      summary: Get information on users
      tags:
        - people
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PersonWithEmail"
      operationId: "get-people_multi-:userIds"
      description: "Get information on multiple users at one time  "
      parameters:
        - schema:
            type: boolean
          in: query
          name: email
          description: Return email address
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: userIds
        in: path
        required: true
        description: |
          User IDs, concatenated with "::::"
  /maps:
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
    get:
      summary: Get or create rooms
      tags:
        - map
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    numCols:
                      type: integer
                      minimum: 0
                    numRows:
                      type: integer
                      minimum: 0
                    id:
                      type: string
                      minLength: 1
                    name:
                      type: string
                      minLength: 1
                    poster_location_count:
                      type: integer
                      minimum: 0
                    poster_count:
                      type: integer
                      minimum: 0
                    owner:
                      $ref: "#/components/schemas/UserId"
                    num_people_joined:
                      type: integer
                    num_people_with_access:
                      type: integer
                    access_codes:
                      type: array
                      items:
                        type: object
                        properties:
                          code:
                            type: string
                          active:
                            type: boolean
                          access_granted:
                            type: array
                            items:
                              type: string
                          timestamp:
                            type: number
                        required:
                          - code
                          - active
                          - access_granted
                          - timestamp
                    allow_poster_assignment:
                      type: boolean
                    move_log:
                      type: boolean
                    minimap_visibility:
                      type: string
                      enum:
                        - all_initial
                        - map_initial
                        - all_only_visited
                        - map_only_visited
                    admins:
                      type: array
                      items:
                        $ref: "#/components/schemas/UserId"
                  required:
                    - numCols
                    - numRows
                    - id
                    - name
                    - poster_location_count
                    - poster_count
                    - owner
                    - allow_poster_assignment
                    - minimap_visibility
                    - admins
      operationId: get-maps
      description: Get a list of rooms
    post:
      summary: Create a new room
      operationId: post-maps-roomId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                  room_id:
                    type: string
      description: Create a new map
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                template:
                  type: string
                allow_poster_assignment:
                  type: boolean
                data:
                  type: string
                minimap_visibility:
                  type: string
                  enum:
                    - all_initial
                    - all_only_visited
                    - map_initial
                    - map_only_visited
              required:
                - name
      tags:
        - map
  "/maps/{roomId}":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
    get:
      summary: Get or delete a map
      tags:
        - map
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  numCols:
                    type: integer
                  numRows:
                    type: integer
                  allow_poster_assignment:
                    type: boolean
                  name:
                    type: string
                  move_log:
                    type: boolean
                  minimap_visibility:
                    type: string
                    enum:
                      - all_initial
                      - map_initial
                      - all_only_visited
                      - map_only_visited
                  access_codes:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                        active:
                          type: boolean
                        access_granted:
                          type: array
                          items:
                            type: string
                        timestamp:
                          type: number
                      required:
                        - code
                        - active
                        - access_granted
                        - timestamp
                  people_groups:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        description:
                          type: string
                        user_count:
                          type: integer
                      required:
                        - id
                        - name
                required:
                  - numCols
                  - numRows
                  - allow_poster_assignment
                  - name
                  - move_log
                  - minimap_visibility
      operationId: get-maps-roomId
      description: Get room information
    delete:
      summary: ""
      operationId: delete-maps-roomId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                required:
                  - ok
      description: Delete an owned map
      tags:
        - map
    patch:
      summary: Update room settings.
      operationId: patch-maps-roomId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      description: Update room settings.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                allow_poster_assignment:
                  type: boolean
                access_rules:
                  type: array
                  items:
                    type: object
                    properties:
                      email:
                        type: string
                        description: "This can be regular expression  "
                      resource:
                        type: string
                      allow:
                        type: boolean
                    required:
                      - email
                      - allow
                access_rules_active:
                  type: boolean
                minimap_visibility:
                  type: string
                  enum:
                    - all_initial
                    - map_initial
                    - all_only_visited
                    - map_only_visited
            examples:
              example-1:
                value:
                  publicly_visible: true
                  requires_access_code: true
          application/xml:
            schema:
              type: object
              properties: {}
        description: ""
      tags:
        - map
  "/maps/{roomId}/enter":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
    post:
      summary: Enter a room
      operationId: post-maps-roomId-enter
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  status:
                    type: string
                  public_key:
                    type: string
                  socket_url:
                    type: string
                  socket_protocol:
                    type: string
                    enum:
                      - Socket.IO
                      - WebSocket
                required:
                  - ok
      tags:
        - map
      security:
        - debugAs: []
        - debugToken: []
      description: Enter a room
  "/maps/{roomId}/chat_groups/{groupId}/join":
    post:
      summary: Join a chat
      operationId: "post-maps-:room_id-groups-:group_id-join"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                  joinedGroup:
                    $ref: "#/components/schemas/ChatGroup"
                required:
                  - ok
      description: "Join a chat group. You can only join one chat group at maximum.  "
      tags:
        - chat
      security:
        - debugAs: []
        - debugToken: []
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
          minLength: 1
        name: roomId
        in: path
        required: true
      - schema:
          type: string
        name: groupId
        in: path
        required: true
  "/maps/{roomId}/chat_groups/{groupId}/leave":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
      - schema:
          type: string
        name: groupId
        in: path
        required: true
    post:
      summary: Leave a chat group
      operationId: post-maps-roomId-groups-groupId-leave
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                  leftGroup:
                    $ref: "#/components/schemas/ChatGroup"
                required:
                  - ok
      description: Leave a chat group.
      tags:
        - chat
      security:
        - debugAs: []
        - debugToken: []
  "/maps/{roomId}/chat_groups/{groupId}/people":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
      - schema:
          type: string
        name: groupId
        in: path
        required: true
    post:
      summary: Add a new person to a chat
      tags:
        - chat
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                  joinedGroup:
                    $ref: "#/components/schemas/ChatGroup"
                required:
                  - ok
      operationId: get-maps-roomId-groups-groupId-people
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
              required:
                - userId
      description: Get people of a group in a room
    delete:
      summary: ""
      operationId: delete-maps-roomId-groups-groupId-people
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  group_removed:
                    type: boolean
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserId"
                required:
                  - ok
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      tags:
        - chat
      description: "Kick out a member from chat  "
  "/maps/{roomId}/chat_groups":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
    post:
      summary: Make a new chat group
      tags:
        - chat
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                  group:
                    $ref: "#/components/schemas/ChatGroup"
                required:
                  - ok
      operationId: post-maps-roomId-groups
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fromUser:
                  $ref: "#/components/schemas/UserId"
                toUsers:
                  type: array
                  items:
                    $ref: "#/components/schemas/UserId"
              required:
                - fromUser
                - toUsers
      description: Create a new chat group
    get:
      summary: List members of a chat group
      operationId: get-maps-roomId-groups
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatGroup"
      description: List members of a chat group
      tags:
        - chat
      security:
        - debugAs: []
        - debugToken: []
  /chat_groups:
    get:
      summary: Get chat groups
      tags:
        - chat
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatGroup"
      operationId: get-chat-groups
      description: Get chat groups (Return type stub)
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
  "/maps/{roomId}/people/{userId}/chat_groups":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Get a group the user belongs to.
      tags:
        - chat
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatGroup"
      operationId: get-maps-roomId-people-userId-groups
      description: Get a chat group of the user in a room
  "/maps/{roomId}/comments":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
    get:
      summary: Get all comments in the room
      tags:
        - chat
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/ChatComment"
                    - type: object
                      properties:
                        kind:
                          type: string
                          enum:
                            - event
                        event_type:
                          type: string
                          enum:
                            - new
                            - join
                            - add
                            - leave
                            - dissolve
                            - start_overhear
                            - end_overhear
                            - set_private
                        event_data:
                          type: object
                          properties:
                            additionalProperties:
                              type: string
                        person:
                          type: string
                        group:
                          type: string
                        timestamp:
                          type: number
                      required:
                        - kind
                        - event_type
                        - person
                        - group
                        - timestamp
      operationId: get-maps-roomId-comments
      description: Get all comments (that are visible to a user) in the room.
  "/posters/{posterId}/comments/{commentId}":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: posterId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    patch:
      summary: Poster comment
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                  comment:
                    $ref: "#/components/schemas/ChatComment"
                required:
                  - ok
      operationId: patch-posters-posterId-comments-commentId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
      description: Update poster comment
      parameters: []
    delete:
      summary: Delete a poster comment
      operationId: delete-posters-posterId-comments-commentId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      description: Delete a poster comment
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
  "/comments/{commentId}":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    patch:
      summary: Edit a comment
      tags:
        - chat
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  comment:
                    $ref: "#/components/schemas/CommentEncrypted"
                  error:
                    type: string
                required:
                  - ok
      operationId: patch-comments-commentId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comments:
                  type: array
                  items:
                    $ref: "#/components/schemas/CommentEncrypted"
      description: Edit a comment
    delete:
      summary: Delete a comment
      operationId: delete-comments-commentId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      description: Delete a comment
      tags:
        - chat
      security:
        - debugAs: []
        - debugToken: []
  "/maps/{roomId}/people/{userId}/poster":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Get a poster of a user in a room
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: string
                  poster:
                    type: string
      operationId: get-maps-roomId-people-userId-poster
      description: "Get a poster of the user in the room  "
  "/people/{userId}/posters":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Get all posters of the user
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  posters:
                    type: array
                    items:
                      $ref: "#/components/schemas/Poster"
      operationId: get-people-userId-posters
      description: Get all poster of the user
  "/maps/{roomId}/people/{userId}/poster/file":
    post:
      summary: Upload a poster file
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      operationId: "post-maps-:roomId-people-:userId-poster-file"
      description: Upload a poster file
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
        description: Image file (PNG or PDF).
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
      - schema:
          type: string
        name: userId
        in: path
        required: true
  "/posters/{posterId}/file":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: posterId
        in: path
        required: true
    get:
      summary: Get a poster file
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: object
                properties: {}
      operationId: get-posters-posterId-file
      description: Get a poster file
      parameters:
        - schema:
            type: integer
          in: query
          name: timestamp
          description: ""
    post:
      summary: Upload a poster file
      operationId: post-posters-posterId-file
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                  poster:
                    $ref: "#/components/schemas/Poster"
                required:
                  - ok
      description: Upload a poster file
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
    delete:
      summary: Delete a poster file
      operationId: delete-posters-posterId-file
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  poster:
                    $ref: "#/components/schemas/Poster"
                  error:
                    type: string
                required:
                  - ok
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
      description: Delete a poster file
  "/posters/{posterId}/comments":
    post:
      summary: Post a comment on a poster
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                required:
                  - ok
      operationId: "post-maps-:roomId-posters-:posterId-comments"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  $ref: "#/components/schemas/UserId"
                comment:
                  type: string
      description: Add a comment on a poster
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: posterId
        in: path
        required: true
    get:
      summary: Get comments on a poster
      operationId: get-posters-posterId-comments
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PosterCommentDecrypted"
      tags:
        - poster
      description: Get comments on a poster
  /posters:
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
    get:
      summary: Get all posters
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Poster"
      operationId: get-posters
      description: Only for admin
  "/maps/{roomId}/posters":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
    get:
      summary: Get all posters in a room
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Poster"
      operationId: get-maps-roomId-posters
      description: Get all posters in a room
  /id_token:
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
    post:
      summary: Submit ID token
      tags:
        - auth
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                  user_id:
                    $ref: "#/components/schemas/UserId"
                  admin:
                    type: boolean
                  public_key:
                    type: string
                  debug_token:
                    type: string
                  registered:
                    type: string
                    enum:
                      - can_register
                      - registered
                  name:
                    type: string
                  updated:
                    type: boolean
                  token_actual:
                    type: string
                required:
                  - ok
                  - updated
      operationId: post-id_token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                debug_from:
                  type: string
                force:
                  type: boolean
      parameters:
        - schema:
            type: string
          in: query
          name: debug_as
        - schema:
            type: string
          in: query
          name: debug_token
      description: Register Firebase Auth ID token
  /ping:
    get:
      summary: Ping
      tags:
        - misc
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                pattern: pong
                default: pong
      operationId: get-ping
      description: "Return pong. Used for health check, etc.  "
  /socket_url:
    get:
      summary: Get socket URL
      tags:
        - misc
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  socket_url:
                    type: string
      operationId: get-socket_url
      description: "Get the URL of a socket server  "
  /public_key:
    get:
      summary: Get my public key
      tags:
        - misc
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  public_key:
                    type: string
                required:
                  - ok
      operationId: get-public_key
      description: Get my public key
    post:
      summary: Post my public key
      operationId: post-public_key
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                required:
                  - ok
      description: Post my public key
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                force:
                  type: boolean
              required:
                - key
      tags:
        - misc
      security:
        - debugAs: []
        - debugToken: []
  /logout:
    post:
      summary: Logout
      tags:
        - auth
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                required:
                  - ok
      operationId: post-logout
      description: Logout from the app and remove cookie
  "/maps/{roomId}/poster_slots/{posterNumber}":
    parameters:
      - schema:
          type: string
        name: roomId
        in: path
        required: true
      - schema:
          type: number
        name: posterNumber
        in: path
        required: true
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
    post:
      summary: Take a poster slot
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
      operationId: post-maps-roomId-take_slot-posterLocation
      description: Take a poster slot. The poster title and user ID can be optionally passed.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                user_id:
                  type: string
    delete:
      summary: ""
      operationId: delete-maps-roomId-poster_slot-posterNumber
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
      description: "Release a poster slot the user reserved  "
      parameters: []
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
  "/maps/{roomId}/poster_slots_multi":
    parameters:
      - schema:
          type: string
        name: roomId
        in: path
        required: true
    post:
      summary: Assign posters in bulk
      tags:
        - poster
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                  added:
                    type: array
                    items:
                      type: number
                  error_entries:
                    type: array
                    items:
                      type: number
                required:
                  - ok
      operationId: post-maps-roomId-posters_multi
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                posters:
                  type: array
                  items:
                    type: object
                    properties:
                      poster_number:
                        type: integer
                      user:
                        $ref: "#/components/schemas/UserId"
                      title:
                        type: string
                    required:
                      - poster_number
                      - user
              required:
                - posters
      description: Assign poster locations in bulk
  /latency_report:
    post:
      summary: Submit a latency report
      tags:
        - misc
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                required:
                  - ok
      operationId: post-latency_report
      description: Submit a latency report. Used for performance metrics.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  url:
                    type: string
                  method:
                    type: string
                    enum:
                      - GET
                      - POST
                      - PATCH
                      - PUT
                      - DELETE
                      - HEAD
                      - OPTIONS
                      - LINK
                      - UNLINK
                  latency:
                    type: number
                  timestamp:
                    type: integer
        description: ""
  /register:
    post:
      summary: Register a user
      tags:
        - people
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  user:
                    $ref: "#/components/schemas/PersonWithEmail"
                  error:
                    type: string
                required:
                  - ok
      operationId: post-register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
                access_code:
                  type: string
              required:
                - email
                - name
                - access_code
      description: "Register a new user from their web browser  "
  /blind_sign/key_pair:
    get:
      summary: Get a key pair for blind signature
      tags:
        - misc
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  "N":
                    type: string
                  E:
                    type: string
                required:
                  - "N"
                  - E
      operationId: get-blind_sign-key_pair
      description: Get a key pair for blind signature.
  /blind_sign/sign:
    post:
      summary: Sign a message with blind signature
      tags:
        - misc
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  signed:
                    type: string
                required:
                  - ok
      operationId: post-blind_sign-sign
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                blinded:
                  type: string
              required:
                - blinded
      description: Blind sign a message
  /blind_sign/verify:
    get:
      summary: Verify blind signature
      tags:
        - misc
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                required:
                  - ok
      operationId: get-blind_sign-verify
      parameters:
        - schema:
            type: string
          in: query
          name: unblinded
        - schema:
            type: string
          in: query
          name: message
      description: "Verify blind signature  "
  "/maps/{roomId}/chat_groups/{groupId}/comments":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
      - schema:
          type: string
        name: groupId
        in: path
        required: true
    post:
      summary: Send a comment to a chat group
      operationId: post-maps-roomId-comments
      responses:
        "200":
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CommentEncrypted"
        description: ""
      description: Post a comment in a room
      tags:
        - chat
      security:
        - debugAs: []
        - debugToken: []
  "/maps/{roomId}/posters/{posterId}/approach":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
      - schema:
          type: string
        name: posterId
        in: path
        required: true
    post:
      summary: Approach the poster
      tags:
        - map
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
      operationId: post-maps-roomId-posters-posterId-approach
      description: Approach a poster by walking.
  "/people/{userId}/access_code":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Post an access code
      tags:
        - misc
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                  added:
                    type: array
                    items:
                      type: string
                  primary_room:
                    type: string
                required:
                  - ok
      operationId: post-people-userId-access_code
      description: "Post an access code for rooms, etc."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access_code:
                  type: string
              required:
                - access_code
  "/posters/{posterId}":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: posterId
        in: path
        required: true
    patch:
      summary: Update poster info
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
      operationId: patch-posters-posterId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                access_log:
                  type: boolean
                author_online_only:
                  type: boolean
      description: Update poster info.
  "/comments/{commentId}/reply":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    post:
      summary: Add a reply to a comment
      tags:
        - chat
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      operationId: post-comments-commentId-reply
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CommentEncrypted"
      description: "Add a comment reply  "
  "/posters/{posterId}/comments/{commentId}/reply":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: posterId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    post:
      summary: Post a reply to a poster comment
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                required:
                  - ok
      operationId: post-posters-posterId-comments-commentId-reply
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
              required:
                - text
  "/maps/{roomId}/posters/{posterId}/enter":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
      - schema:
          type: string
        name: posterId
        in: path
        required: true
    post:
      summary: Start viewing a poster
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                  image_allowed:
                    type: boolean
                  image_url:
                    type: string
                required:
                  - ok
      operationId: post-maps-roomId-posters-posterId-enter
      description: "Start viewing a poster. After this, the user can get poster image and comments.  "
  "/maps/{roomId}/posters/{posterId}/leave":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
      - schema:
          type: string
        name: posterId
        in: path
        required: true
    post:
      summary: Start viewing a poster
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                required:
                  - ok
      operationId: post-maps-roomId-posters-posterId-leave
      description: "Finish viewing a poster. After this, the user cannot get comments until they enter it again.  "
  "/maps/{roomId}/posters/{posterId}/history":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
      - schema:
          type: string
        name: posterId
        in: path
        required: true
    get:
      summary: Get a view history of a poster
      tags:
        - poster
      security:
        - debugAs: []
        - debugToken: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user_id:
                      type: string
                    joined_time:
                      type: number
                    left_time:
                      type: number
                    last_active:
                      type: number
                  required:
                    - user_id
                    - joined_time
      operationId: get-maps-roomId-posters-posterId-history
      description: "Get a view history of a poster. Only when the poster author and/or administrator enables logging, it has a public record."
  "/people/{userId}/comments":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Export all comment logs
      tags:
        - chat
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatComment"
      operationId: get-people-userId-comments
      description: "Export all comment logs  "
  "/maps/{roomId}/leave":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
    post:
      summary: Leave a map
      tags:
        - map
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                required:
                  - ok
      operationId: post-maps-roomId-leave
      description: Leave a map. Poster viewing and group chat will also be finished.
  /debug_token:
    get:
      summary: Get a debug token
      tags:
        - auth
      operationId: get-debug_token
      description: Get a debug token. Only for admin
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  debug_token:
                    type: string
                required:
                  - debug_token
          description: OK
  "/posters/{posterId}/file_url":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: posterId
        in: path
        required: true
    get:
      summary: Get a poster image URL.
      tags:
        - poster
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  ok:
                    type: boolean
                required:
                  - ok
      operationId: get-maps-roomId-posters-posterId-image_url
      security:
        - debugAs: []
        - debugToken: []
      description: "Get a signed URL of   a poster image. This is only allowed when the user is viewing poster.  "
  "/maps/{roomId}/access_code/{accessCode}/renew":
    parameters:
      - schema:
          type: string
        name: roomId
        in: path
        required: true
      - schema:
          type: string
        name: accessCode
        in: path
        required: true
    post:
      summary: Renew access code
      tags:
        - map
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  ok:
                    type: boolean
                  error:
                    type: string
                  active:
                    type: boolean
                required:
                  - ok
      operationId: post-maps-roomId-access_code-renew
      description: "Renew access code.  "
  "/maps/{roomId}/people/{userId}":
    parameters:
      - schema:
          type: string
        name: roomId
        in: path
        required: true
      - schema:
          type: string
        name: userId
        in: path
        required: true
    delete:
      summary: Delete user access from room
      tags:
        - people
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      operationId: delete-maps-roomId-people-userId
      description: Delete person's room access
    patch:
      summary: ""
      operationId: patch-maps-roomId-people-userId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum:
                    - admin
                    - user
              required:
                - role
  "/maps/{roomId}/access_code":
    parameters:
      - schema:
          type: string
        name: roomId
        in: path
        required: true
    post:
      summary: Create a new access code
      operationId: post-maps-roomId-access_code
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  access_code:
                    type: object
                    properties:
                      code:
                        type: string
                      access_granted:
                        type: array
                        items:
                          type: string
                      active:
                        type: boolean
                      timestamp:
                        type: number
                    required:
                      - code
                      - access_granted
                      - active
                      - timestamp
      description: Create a new access code
      tags:
        - auth
        - map
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access_granted:
                  type: array
                  items:
                    type: string
                active:
                  type: boolean
  "/maps/{roomId}/access_code/{accessCode}":
    parameters:
      - schema:
          type: string
        name: roomId
        in: path
        required: true
      - schema:
          type: string
        name: accessCode
        in: path
        required: true
    patch:
      summary: Update access code property
      tags:
        - map
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
      operationId: patch-maps-roomId-access_code-accessCode
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                active:
                  type: boolean
                access_granted:
                  type: array
                  items:
                    type: string
    delete:
      summary: Delete room access code
      operationId: delete-maps-roomId-access_code-accessCode
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      description: "Delete room access code  "
  "/maps/{roomId}/posters/refresh_files":
    parameters:
      - schema:
          type: string
        name: roomId
        in: path
        required: true
    post:
      summary: Refresh files
      tags:
        - poster
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      operationId: post-maps-roomId-posters-refresh_files
      description: "Refresh file_uploaded flags by actual exitence of files  "
  "/maps/{roomId}/people_multi":
    parameters:
      - schema:
          type: string
        name: roomId
        in: path
        required: true
    post:
      summary: Add users to a map
      tags:
        - people
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                  added:
                    type: array
                    items:
                      type: string
                  error_entries:
                    type: array
                    items:
                      type: string
                required:
                  - ok
      operationId: post-maps-roomId-people_multi
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                people:
                  type: array
                  items:
                    type: object
                    properties:
                      email:
                        type: string
                      assign_position:
                        type: boolean
                    required:
                      - email
      description: Add users to a map.
  "/maps/{roomId}/people_allowed":
    parameters:
      - schema:
          type: string
        name: roomId
        in: path
        required: true
    get:
      summary: Get people that have access to room
      tags:
        - map
        - people
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  people:
                    type: array
                    items:
                      type: object
                      properties:
                        email:
                          type: string
                      required:
                        - email
                required:
                  - ok
                  - people
      operationId: get-maps-roomId-people_allowed
      description: Get the list of people who have access. They don't necessarily have to be registered (with user ID).
    post:
      summary: Give a person access to room
      operationId: post-maps-roomId-people_allowed
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      description: "Give the user, which is specified by email, access to the room."
      tags:
        - map
        - people
  "/maps/{roomId}/people_allowed/{email}":
    parameters:
      - schema:
          type: string
        name: roomId
        in: path
        required: true
      - schema:
          type: string
        name: email
        in: path
        required: true
    delete:
      summary: Delete user access by email
      tags:
        - people
        - map
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      operationId: delete-maps-roomId-people_allowed-email
      description: "Delete user access by email. The user can be just email stub who are not registered, and does not necessarily have an user ID."
  "/comments/{commentId}/read":
    parameters:
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    post:
      summary: Tell the server that the message is read
      tags:
        - chat
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      operationId: post-comments-commentId-read
      description: Tell the server that the message is read
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                read:
                  type: boolean
              required:
                - read
  "/maps/{roomId}/notifications":
    parameters:
      - schema:
          type: string
        name: roomId
        in: path
        required: true
    get:
      summary: Get notifications
      tags:
        - map
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
      operationId: get-maps-roomId-notifications
      description: Get notifications to user from server
  "/maps/{roomId}/reset_cache":
    parameters:
      - $ref: "#/components/parameters/debug_token"
      - $ref: "#/components/parameters/debug_as"
      - schema:
          type: string
        name: roomId
        in: path
        required: true
    post:
      summary: Reset map cache on Redis
      tags:
        - map
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      operationId: post-maps-roomId-reset_cache
  "/posters/{posterId}/file_upload_url":
    parameters:
      - schema:
          type: string
        name: posterId
        in: path
        required: true
    get:
      summary: Get a URL for uploading a poster file on S3
      tags: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                  url:
                    type: string
                  target:
                    type: string
                    enum:
                      - s3
                      - api_server
                required:
                  - ok
      operationId: get-posters-posterId-file_upload_url
      parameters:
        - schema:
            type: string
          in: query
          name: mime_type
          required: true
  "/posters/{posterId}/file_upload_done":
    parameters:
      - schema:
          type: string
        name: posterId
        in: path
        required: true
    post:
      summary: Notify the server completing the upload
      tags: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
      operationId: post-posters-posterId-file_upload_done
      description: "Notify the server completion of upload  "
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                mime_type:
                  type: string
              required:
                - mime_type
  "/maps/{roomId}/cells":
    parameters:
      - schema:
          type: string
        name: roomId
        in: path
        required: true
    patch:
      summary: Modify map layout
      tags:
        - map
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      operationId: patch-maps-roomId-cells
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                changes:
                  type: array
                  items: {}
                message:
                  type: string
      description: Modify map layout
    put:
      summary: Replace all map cells at once
      operationId: put-maps-roomId-cells
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      description: Replace all map cells at once
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: string
                message:
                  type: string
              required:
                - data
      tags:
        - map
    get:
      summary: Get map cells
      operationId: get-maps-roomId-cells
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  numCols:
                    type: integer
                  numRows:
                    type: integer
                  cells:
                    type: array
                    required: true
                    items:
                      type: array
                      required: true
                      items:
                        $ref: "#/components/schemas/Cell"
                        required: true
                required:
                  - numCols
                  - numRows
                  - cells
      tags:
        - map
      description: Get map layout of the room
  "/maps/{roomId}/people_groups":
    parameters:
      - schema:
          type: string
        name: roomId
        in: path
        required: true
        description: Room ID
    post:
      summary: Add a people group
      tags:
        - people
        - map
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  error:
                    type: string
                required:
                  - ok
      operationId: post-maps-roomId-people_groups
      description: "Add a people group placeholder.  "
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                groups:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      description:
                        type: string
                    required:
                      - name
              required:
                - groups
      parameters: []
components:
  parameters:
    debug_token:
      in: query
      name: debug_token
      required: false
      schema:
        type: string
      description: Debug token
    debug_as:
      in: query
      name: debug_as
      required: false
      schema:
        type: string
      description: Debug as a user
  schemas:
    Person:
      title: Person
      type: object
      description: Person
      x-examples: {}
      x-tags:
        - types
      properties:
        id:
          type: string
        name:
          type: string
        last_updated:
          type: integer
        public_key:
          type: string
      required:
        - id
        - name
        - last_updated
    PersonWithEmail:
      title: PersonWithEmail
      type: object
      description: Person with email
      x-examples:
        example-1: {}
      x-tags:
        - types
      properties:
        id:
          type: string
        name:
          type: string
        last_updated:
          type: integer
        email:
          type: string
          format: email
        public_key:
          type: string
        stats:
          $ref: "#/components/schemas/PersonStat"
        profiles:
          type: object
          additionalProperties:
            type: object
            properties:
              last_updated:
                type: integer
              content:
                type: string
              metadata:
                type: object
            required:
              - last_updated
              - content
      required:
        - id
        - name
        - last_updated
        - stats
        - profiles
    Cell:
      title: Cell
      type: object
      x-tags:
        - types
      description: Map cell
      properties:
        id:
          type: string
        x:
          type: integer
        "y":
          type: integer
        kind:
          type: string
          enum:
            - grass
            - wall
            - water
            - poster
            - poster_seat
            - mud
        open:
          type: boolean
        poster_number:
          type: integer
        custom_image:
          type: string
        link_url:
          type: string
          format: uri
        visited:
          type: string
          enum:
            - visited
            - seen
      required:
        - id
        - x
        - "y"
        - kind
        - open
    ChatGroup:
      title: ChatGroup
      type: object
      description: Chat group
      x-tags:
        - types
      properties:
        id:
          $ref: "#/components/schemas/ChatGroupId"
        room:
          $ref: "#/components/schemas/RoomId"
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserId"
        color:
          type: string
        kind:
          type: string
          enum:
            - poster
            - people
        last_updated:
          type: number
      required:
        - id
        - room
        - users
        - color
        - kind
        - last_updated
    UserId:
      type: string
      title: UserId
      minLength: 1
      pattern: '[\w_-]+'
      maxLength: 15
      x-tags:
        - types
    PosterId:
      type: string
      title: PosterId
      minLength: 1
      pattern: '[\w_-]+'
      maxLength: 15
      x-tags:
        - types
    ChatGroupId:
      type: string
      title: ChatGroupID
      x-tags:
        - types
    RoomId:
      type: string
      title: RoomId
      minLength: 1
      x-tags:
        - types
    PosterCommentDecrypted:
      title: PosterCommentDecrypted
      type: object
      description: Poster comment object
      x-tags:
        - types
      properties:
        id:
          type: string
        timestamp:
          type: integer
        last_updated:
          type: integer
        room:
          $ref: "#/components/schemas/RoomId"
        x:
          type: integer
          minimum: 0
        "y":
          type: integer
          minimum: 0
        person:
          $ref: "#/components/schemas/UserId"
        text_decrypted:
          type: string
        reply_to:
          type: string
        poster:
          $ref: "#/components/schemas/PosterId"
      required:
        - id
        - timestamp
        - last_updated
        - room
        - x
        - "y"
        - person
        - text_decrypted
        - poster
    ChatCommentDecrypted:
      title: ChatCommentDecrypted
      type: object
      description: Chat comment object
      x-tags:
        - types
      properties:
        id:
          type: string
        timestamp:
          type: integer
        last_updated:
          type: integer
        room:
          $ref: "#/components/schemas/RoomId"
        x:
          type: integer
          minimum: 0
        "y":
          type: integer
          minimum: 0
        person:
          $ref: "#/components/schemas/UserId"
        text_decrypted:
          type: string
        texts:
          type: array
          items:
            type: object
            properties:
              encrypted:
                type: boolean
              to:
                oneOf:
                  - $ref: "#/components/schemas/UserId"
                  - $ref: "#/components/schemas/PosterId"
            required:
              - encrypted
              - to
        kind:
          type: string
          enum:
            - poster
            - person
        reply_to:
          type: string
      required:
        - id
        - timestamp
        - last_updated
        - room
        - x
        - "y"
        - person
        - text_decrypted
        - texts
        - kind
    CommentEncrypted:
      title: CommentEncrypted
      type: object
      description: Encrypted comment object
      x-tags:
        - types
      properties:
        to:
          type: string
        text:
          type: string
        encrypted:
          type: boolean
      required:
        - to
        - text
        - encrypted
    ChatComment:
      title: ChatComment
      type: object
      x-tags:
        - types
      properties:
        id:
          $ref: "#/components/schemas/CommentId"
        timestamp:
          type: integer
        last_updated:
          type: integer
        room:
          $ref: "#/components/schemas/RoomId"
        x:
          type: integer
        "y":
          type: integer
        person:
          $ref: "#/components/schemas/UserId"
        kind:
          type: string
          enum:
            - poster
            - person
        texts:
          type: array
          items:
            $ref: "#/components/schemas/CommentEncrypted"
        reply_to:
          type: string
      required:
        - id
        - timestamp
        - last_updated
        - room
        - x
        - "y"
        - person
        - kind
        - texts
    Poster:
      title: Poster
      type: object
      x-tags:
        - types
      properties:
        id:
          $ref: "#/components/schemas/PosterId"
        last_updated:
          type: integer
        title:
          type: string
        author:
          $ref: "#/components/schemas/UserId"
        room:
          $ref: "#/components/schemas/RoomId"
        location:
          type: string
        poster_number:
          type: integer
        x:
          type: number
        "y":
          type: number
        file_url:
          type: string
        access_log:
          type: boolean
          description: Record access log
        author_online_only:
          type: boolean
          description: Allow access only when the author is online
        file_size:
          type: integer
      required:
        - id
        - last_updated
        - author
        - room
        - location
        - poster_number
        - x
        - "y"
        - file_url
        - access_log
        - author_online_only
    PersonInMap:
      title: PersonInMap
      type: object
      description: ""
      properties:
        id:
          type: string
        room:
          type: string
        x:
          type: number
        "y":
          type: number
        direction:
          type: string
          enum:
            - up
            - down
            - left
            - right
            - none
        name:
          type: string
        last_updated:
          type: integer
        moving:
          type: boolean
        stats:
          $ref: "#/components/schemas/PersonStat"
        poster_viewing:
          $ref: "#/components/schemas/PosterId"
        email:
          type: string
        role:
          type: string
          enum:
            - owner
            - admin
            - user
        people_groups:
          type: array
          items:
            type: string
      required:
        - id
        - room
        - x
        - "y"
        - direction
        - name
        - last_updated
        - moving
        - stats
    PersonStat:
      title: PersonStat
      type: object
      properties:
        walking_steps:
          type: integer
        people_encountered:
          type: array
          items:
            type: string
        chat_count:
          type: integer
        chat_char_count:
          type: integer
      required:
        - walking_steps
        - people_encountered
        - chat_count
        - chat_char_count
    CommentId:
      title: CommentId
      type: string
    Notification:
      title: Notification
      type: object
      description: Notification sent from server
      properties:
        kind:
          type: string
          enum:
            - poster_comments
        data:
          $ref: "#/components/schemas/NotificationPosterCommentsData"
        timestamp:
          type: integer
      required:
        - kind
        - timestamp
    NotificationPosterCommentsData:
      title: NotificationPosterCommentsData
      type: object
      properties:
        poster:
          $ref: "#/components/schemas/PosterId"
        count:
          type: integer
      required:
        - poster
        - count
  securitySchemes:
    debugAs:
      type: apiKey
      in: query
      name: debug_as
      description: ""
    debugToken:
      type: apiKey
      in: query
      name: debug_token
tags:
  - name: chat
  - name: map
  - name: people
  - name: poster
  - name: auth
  - name: misc
security:
  - debugToken: []
  - debugAs: []
