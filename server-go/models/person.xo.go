// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

// Person represents a row from 'public.person'.
type Person struct {
	ID          string     `json:"id" db:"id"`                     // id
	LastUpdated int64      `json:"last_updated" db:"last_updated"` // last_updated
	Name        string     `json:"name" db:"name"`                 // name
	Avatar      NullString `json:"avatar" db:"avatar"`             // avatar
	Email       string     `json:"email" db:"email"`               // email
	Role        UserRole   `json:"role" db:"role"`                 // role

	// xo fields
	_exists, _deleted bool
}

// PersonByEmail retrieves a row from 'public.person' as a Person.
//
// Generated from index 'person_email_key'.
func PersonByEmail(db XODB, email string) (*Person, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, last_updated, name, avatar, email, role ` +
		`FROM public.person ` +
		`WHERE email = $1`

	// run query
	XOLog(sqlstr, email)
	p := Person{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&p.ID, &p.LastUpdated, &p.Name, &p.Avatar, &p.Email, &p.Role)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// PersonByID retrieves a row from 'public.person' as a Person.
//
// Generated from index 'person_pkey'.
func PersonByID(db XODB, id string) (*Person, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, last_updated, name, avatar, email, role ` +
		`FROM public.person ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	p := Person{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.LastUpdated, &p.Name, &p.Avatar, &p.Email, &p.Role)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
