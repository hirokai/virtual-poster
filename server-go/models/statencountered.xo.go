// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

// StatEncountered represents a row from 'public.stat_encountered'.
type StatEncountered struct {
	Person      string `json:"person" db:"person"`           // person
	Encountered string `json:"encountered" db:"encountered"` // encountered

	// xo fields
	_exists, _deleted bool
}

// PersonByEncountered returns the Person associated with the StatEncountered's Encountered (encountered).
//
// Generated from foreign key 'stat_encountered_encountered_fkey'.
func (se *StatEncountered) PersonByEncountered(db XODB) (*Person, error) {
	return PersonByID(db, se.Encountered)
}

// PersonByPerson returns the Person associated with the StatEncountered's Person (person).
//
// Generated from foreign key 'stat_encountered_person_fkey'.
func (se *StatEncountered) PersonByPerson(db XODB) (*Person, error) {
	return PersonByID(db, se.Person)
}

// StatEncounteredByPersonEncountered retrieves a row from 'public.stat_encountered' as a StatEncountered.
//
// Generated from index 'stat_encountered_pkey'.
func StatEncounteredByPersonEncountered(db XODB, person string, encountered string) (*StatEncountered, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`person, encountered ` +
		`FROM public.stat_encountered ` +
		`WHERE person = $1 AND encountered = $2`

	// run query
	XOLog(sqlstr, person, encountered)
	se := StatEncountered{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, person, encountered).Scan(&se.Person, &se.Encountered)
	if err != nil {
		return nil, err
	}

	return &se, nil
}
